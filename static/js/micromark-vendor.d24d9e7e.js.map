{"version":3,"file":"static/js/micromark-vendor.d24d9e7e.js","mappings":"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","sources":["../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n"],"names":["attention","name","tokenize","effects","ok","attentionMarkers","this","parser","constructs","null","previous","before","classifyCharacter","marker","code","enter","inside","consume","token","exit","after","open","includes","close","_open","Boolean","_close","resolveAll","events","context","group","text","openingSequence","closingSequence","use","nextEvents","offset","index","length","type","sliceSerialize","charCodeAt","end","start","Object","assign","movePoint","push","insideSpan","slice","splice","point","column","_bufferIndex","autolink","nok","size","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","next","blankLine","markdownSpace","factorySpace","markdownLineEnding","partial","blockQuote","self","state","containerState","_container","continuation","contBefore","disable","undefined","attempt","characterEscape","asciiPunctuation","characterReference","max","test","numeric","value","asciiHexDigit","asciiDigit","decodeNamedCharacterReference","nonLazyContinuation","lineStart","lazy","now","line","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","interrupt","check","atNonLazyBreak","contentType","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","concrete","codeIndented","afterPrefix","atBreak","furtherStart","codeText","between","data","resolve","tailExitIndex","headEnterIndex","content","chunkInside","contentEnd","continuationConstruct","contentContinue","subtokenize","prefixed","flow","definition","identifier","factoryLabel","call","labelAfter","normalizeIdentifier","markerAfter","markdownLineEndingOrSpace","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","label","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","list","initialSize","kind","thematicBreak","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","_closeFlow","furtherBlankLines","notInCurrentItem","indentConstruct","setextUnderline","paragraph","heading","sequence","gfm","options","combineExtensions","gfmAutolinkLiteral","gfmFootnote","gfmStrikethrough","gfmTable","gfmTaskListItem","literalType","literalMarkerType","rawType","stringType","limit","Number","POSITIVE_INFINITY","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","markerType","seen","labelInside","labelEscape","prefix","begin","escape","regexCheck","unicodePunctuation","unicodeWhitespace","regex","remove","items","parameters","chunkStart","Array","from","unshift","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","stream","current","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","pop"],"sourceRoot":""}